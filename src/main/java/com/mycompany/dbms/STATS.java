/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.dbms;

import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Moideen Aadil Shan
 */
public class STATS extends javax.swing.JFrame {
int b;
    /**
     * Creates new form STATS
     */
private void dropdown() throws SQLException {
    try {
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = Connect.getConnection();
        Statement stm = con.createStatement();
        
        String sql = "SELECT * from PLAYERS";
        ResultSet rs = stm.executeQuery(sql);

        
        while (rs.next()) {
            String name = rs.getString("FNAME");
            statOP.addItem(name);
            
        }
    } catch (SQLException ex) {
        ex.printStackTrace();
    } catch (ClassNotFoundException ex) {
        Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
    }
}
    public STATS(int a) throws SQLException {
        b=a;
        initComponents();
        setExtendedState(PLAYERS.MAXIMIZED_BOTH);
        dropdown();
        if(b==0){
            jLabel9.setVisible(false);
            statOP.setVisible(false);
            goals.setVisible(false);
            goals1.setVisible(false);
            goals2.setVisible(false);
            goals3.setVisible(false);
            goals4.setVisible(false);
            goals5.setVisible(false);
            goals6.setVisible(false);
            goals7.setVisible(false);
        }
    }

    private STATS() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        back = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        displayBTN = new javax.swing.JButton();
        statOP = new javax.swing.JComboBox<>();
        goals = new javax.swing.JButton();
        goals1 = new javax.swing.JButton();
        goals2 = new javax.swing.JButton();
        goals3 = new javax.swing.JButton();
        goals4 = new javax.swing.JButton();
        goals5 = new javax.swing.JButton();
        goals6 = new javax.swing.JButton();
        goals7 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        back.setFont(new java.awt.Font("Solid Edge Stencil", 1, 14)); // NOI18N
        back.setText("<");
        back.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 102), 2, true));
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel9.setText("EDIT PLAYER STATS");

        jPanel3.setBackground(new java.awt.Color(0, 102, 102));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "PLAYER_ID", "PLAYER NAME", "GOALS", "ASSISTS", "YELLOW CARDS", "RED CARDS"
            }
        ));
        jScrollPane1.setViewportView(table);

        displayBTN.setBackground(new java.awt.Color(0, 0, 0));
        displayBTN.setFont(new java.awt.Font("Solid Edge Stencil", 0, 12)); // NOI18N
        displayBTN.setForeground(new java.awt.Color(255, 255, 255));
        displayBTN.setText("DISPLAY ALL");
        displayBTN.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        displayBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 579, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(265, 265, 265)
                        .addComponent(displayBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(displayBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        statOP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "___" }));

        goals.setBackground(new java.awt.Color(204, 204, 204));
        goals.setFont(new java.awt.Font("Solid Edge Stencil", 0, 12)); // NOI18N
        goals.setText("GOALS +");
        goals.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        goals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goalsActionPerformed(evt);
            }
        });

        goals1.setBackground(new java.awt.Color(0, 0, 0));
        goals1.setFont(new java.awt.Font("Solid Edge Stencil", 0, 12)); // NOI18N
        goals1.setForeground(new java.awt.Color(255, 255, 255));
        goals1.setText("ASSISTS+");
        goals1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        goals1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goals1ActionPerformed(evt);
            }
        });

        goals2.setBackground(new java.awt.Color(255, 255, 0));
        goals2.setFont(new java.awt.Font("Solid Edge Stencil", 0, 12)); // NOI18N
        goals2.setText("YELLOW CARDS+");
        goals2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        goals2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goals2ActionPerformed(evt);
            }
        });

        goals3.setBackground(new java.awt.Color(255, 0, 0));
        goals3.setFont(new java.awt.Font("Solid Edge Stencil", 0, 12)); // NOI18N
        goals3.setForeground(new java.awt.Color(255, 255, 255));
        goals3.setText("RED CARDS+");
        goals3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        goals3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goals3ActionPerformed(evt);
            }
        });

        goals4.setBackground(new java.awt.Color(204, 204, 204));
        goals4.setFont(new java.awt.Font("Solid Edge Stencil", 0, 12)); // NOI18N
        goals4.setText("GOALS -");
        goals4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        goals4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goals4ActionPerformed(evt);
            }
        });

        goals5.setBackground(new java.awt.Color(0, 0, 0));
        goals5.setFont(new java.awt.Font("Solid Edge Stencil", 0, 12)); // NOI18N
        goals5.setForeground(new java.awt.Color(255, 255, 255));
        goals5.setText("ASSISTS-");
        goals5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        goals5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goals5ActionPerformed(evt);
            }
        });

        goals6.setBackground(new java.awt.Color(255, 255, 0));
        goals6.setFont(new java.awt.Font("Solid Edge Stencil", 0, 12)); // NOI18N
        goals6.setText("YELLOW CARDS-");
        goals6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        goals6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goals6ActionPerformed(evt);
            }
        });

        goals7.setBackground(new java.awt.Color(255, 0, 0));
        goals7.setFont(new java.awt.Font("Solid Edge Stencil", 0, 12)); // NOI18N
        goals7.setForeground(new java.awt.Color(255, 255, 255));
        goals7.setText("RED CARDS+");
        goals7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        goals7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goals7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(statOP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(285, 285, 285))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(243, 243, 243)
                                .addComponent(jLabel9))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(173, 173, 173)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(goals6, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(goals7, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(goals4, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(goals5, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(goals2, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(goals3, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(goals, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(112, 112, 112)
                                        .addComponent(goals1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 162, Short.MAX_VALUE)))
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(87, 87, 87)
                .addComponent(jLabel9)
                .addGap(30, 30, 30)
                .addComponent(statOP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goals, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goals1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(57, 57, 57)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goals2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goals3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(71, 71, 71)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goals4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goals5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(64, 64, 64)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(goals6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(goals7, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 517, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 561, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        dispose();
       HomePage hp=new HomePage(b);
       hp.show();
    }//GEN-LAST:event_backActionPerformed

    private void displayBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayBTNActionPerformed
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = Connect.getConnection();

            Statement stm = con.createStatement();

            String sql = "SELECT * FROM STATS,PLAYERS WHERE PLAYER_ID=PID";
            ResultSet rs = stm.executeQuery(sql);

            // Clear existing data from jTable1
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);

            // Populate jTable1 with data from ResultSet
            while (rs.next()) {
                String lname=rs.getString("fname");
                int goal=rs.getInt("GOALS");
                int assist=rs.getInt("ASSISTS");
                int yellow=rs.getInt("YELLOW_CARDS");
                int red=rs.getInt("RED_CARDS");
                int pid=rs.getInt("pid");
                // Add a new row to jTable1
                model.addRow(new Object[]{pid,lname,goal,assist,yellow,red});
            }

            // Close resources
            rs.close();
            stm.close();
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CONTRACTS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_displayBTNActionPerformed

    private void goalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goalsActionPerformed
        if ("___".equals(statOP.getSelectedItem())) {
    JOptionPane.showMessageDialog(this, "SELECT A PLAYER ");
    return;
}
String a = (String) statOP.getSelectedItem();

try {
    Class.forName("com.mysql.jdbc.Driver");
    Connection con = Connect.getConnection();
    Statement stm = con.createStatement();
    String sql = "SELECT * FROM stats s " +
                 "INNER JOIN players p ON s.PID = p.PLAYER_ID " +
                 "WHERE p.FNAME = ?";
    PreparedStatement stmt = con.prepareStatement(sql);
    stmt.setString(1, a);
    ResultSet rs = stmt.executeQuery();
    rs.next();
    int goal = rs.getInt("GOALS");
    int pid = rs.getInt("pid");
    goal += 1;
    sql = "update stats set goals=" + goal + " where pid=" + pid + "";
    int affect = stm.executeUpdate(sql);
    if (affect > 0) {
        displayBTNActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "ManualTrigger"));
    }
} catch (SQLException ex) {
    Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
} catch (ClassNotFoundException ex) {
    Logger.getLogger(CONTRACTS.class.getName()).log(Level.SEVERE, null, ex);
}

    }//GEN-LAST:event_goalsActionPerformed

    private void goals1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goals1ActionPerformed
     if ("___".equals(statOP.getSelectedItem())) {
    JOptionPane.showMessageDialog(this, "SELECT A PLAYER ");
    return;
}
String a = (String) statOP.getSelectedItem();

try {
    Class.forName("com.mysql.jdbc.Driver");
    Connection con = Connect.getConnection();
    Statement stm = con.createStatement();
    String sql = "SELECT * FROM stats s " +
                 "INNER JOIN players p ON s.PID = p.PLAYER_ID " +
                 "WHERE p.FNAME = ?";
    PreparedStatement stmt = con.prepareStatement(sql);
    stmt.setString(1, a);
    ResultSet rs = stmt.executeQuery();
    rs.next();
    int goal = rs.getInt("ASSISTS");
    int pid = rs.getInt("pid");
    goal += 1;
    sql = "update stats set ASSISTS=" + goal + " where pid=" + pid + "";
    int affect = stm.executeUpdate(sql);
    if (affect > 0) {
        displayBTNActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "ManualTrigger"));
    }
} catch (SQLException ex) {
    Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
} catch (ClassNotFoundException ex) {
    Logger.getLogger(CONTRACTS.class.getName()).log(Level.SEVERE, null, ex);
}

    }//GEN-LAST:event_goals1ActionPerformed

    private void goals2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goals2ActionPerformed
      if ("___".equals(statOP.getSelectedItem())) {
    JOptionPane.showMessageDialog(this, "SELECT A PLAYER ");
    return;
}
String a = (String) statOP.getSelectedItem();

try {
    Class.forName("com.mysql.jdbc.Driver");
    Connection con = Connect.getConnection();
    Statement stm = con.createStatement();
    String sql = "SELECT * FROM stats s " +
                 "INNER JOIN players p ON s.PID = p.PLAYER_ID " +
                 "WHERE p.FNAME = ?";
    PreparedStatement stmt = con.prepareStatement(sql);
    stmt.setString(1, a);
    ResultSet rs = stmt.executeQuery();
    rs.next();
    int goal = rs.getInt("YELLOW_CARDS");
    int pid = rs.getInt("pid");
    goal += 1;
    sql = "update stats set YELLOW_CARDS=" + goal + " where pid=" + pid + "";
    int affect = stm.executeUpdate(sql);
    if (affect > 0) {
        displayBTNActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "ManualTrigger"));
    }
} catch (SQLException ex) {
    Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
} catch (ClassNotFoundException ex) {
    Logger.getLogger(CONTRACTS.class.getName()).log(Level.SEVERE, null, ex);
}

    }//GEN-LAST:event_goals2ActionPerformed

    private void goals3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goals3ActionPerformed
      if ("___".equals(statOP.getSelectedItem())) {
    JOptionPane.showMessageDialog(this, "SELECT A PLAYER ");
    return;
}
String a = (String) statOP.getSelectedItem();

try {
    Class.forName("com.mysql.jdbc.Driver");
    Connection con = Connect.getConnection();
    Statement stm = con.createStatement();
    String sql = "SELECT * FROM stats s " +
                 "INNER JOIN players p ON s.PID = p.PLAYER_ID " +
                 "WHERE p.FNAME = ?";
    PreparedStatement stmt = con.prepareStatement(sql);
    stmt.setString(1, a);
    ResultSet rs = stmt.executeQuery();
    rs.next();
    int goal = rs.getInt("RED_CARDS");
    int pid = rs.getInt("pid");
    goal += 1;
    sql = "update stats set RED_CARDS=" + goal + " where pid=" + pid + "";
    int affect = stm.executeUpdate(sql);
    if (affect > 0) {
        displayBTNActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "ManualTrigger"));
    }
} catch (SQLException ex) {
    Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
} catch (ClassNotFoundException ex) {
    Logger.getLogger(CONTRACTS.class.getName()).log(Level.SEVERE, null, ex);
}


    }//GEN-LAST:event_goals3ActionPerformed

    private void goals4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goals4ActionPerformed
         if ("___".equals(statOP.getSelectedItem())) {
    JOptionPane.showMessageDialog(this, "SELECT A PLAYER ");
    return;
}
String a = (String) statOP.getSelectedItem();

try {
    Class.forName("com.mysql.jdbc.Driver");
    Connection con = Connect.getConnection();
    Statement stm = con.createStatement();
    String sql = "SELECT * FROM stats s " +
                 "INNER JOIN players p ON s.PID = p.PLAYER_ID " +
                 "WHERE p.FNAME = ?";
    PreparedStatement stmt = con.prepareStatement(sql);
    stmt.setString(1, a);
    ResultSet rs = stmt.executeQuery();
    rs.next();
    int goal = rs.getInt("GOALS");
    int pid = rs.getInt("pid");
    goal -= 1;
    sql = "update stats set goals=" + goal + " where pid=" + pid + "";
    int affect = stm.executeUpdate(sql);
    if (affect > 0) {
        displayBTNActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "ManualTrigger"));
    }
} catch (SQLException ex) {
    Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
} catch (ClassNotFoundException ex) {
    Logger.getLogger(CONTRACTS.class.getName()).log(Level.SEVERE, null, ex);
}
    }//GEN-LAST:event_goals4ActionPerformed

    private void goals5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goals5ActionPerformed
  if ("___".equals(statOP.getSelectedItem())) {
    JOptionPane.showMessageDialog(this, "SELECT A PLAYER ");
    return;
}
String a = (String) statOP.getSelectedItem();

try {
    Class.forName("com.mysql.jdbc.Driver");
    Connection con = Connect.getConnection();
    Statement stm = con.createStatement();
    String sql = "SELECT * FROM stats s " +
                 "INNER JOIN players p ON s.PID = p.PLAYER_ID " +
                 "WHERE p.FNAME = ?";
    PreparedStatement stmt = con.prepareStatement(sql);
    stmt.setString(1, a);
    ResultSet rs = stmt.executeQuery();
    rs.next();
    int goal = rs.getInt("ASSISTS");
    int pid = rs.getInt("pid");
    goal -= 1;
    sql = "update stats set ASSIST=" + goal + " where pid=" + pid + "";
    int affect = stm.executeUpdate(sql);
    if (affect > 0) {
        displayBTNActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "ManualTrigger"));
    }
} catch (SQLException ex) {
    Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
} catch (ClassNotFoundException ex) {
    Logger.getLogger(CONTRACTS.class.getName()).log(Level.SEVERE, null, ex);
}        
    }//GEN-LAST:event_goals5ActionPerformed

    private void goals6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goals6ActionPerformed
          if ("___".equals(statOP.getSelectedItem())) {
    JOptionPane.showMessageDialog(this, "SELECT A PLAYER ");
    return;
}
String a = (String) statOP.getSelectedItem();

try {
    Class.forName("com.mysql.jdbc.Driver");
    Connection con = Connect.getConnection();
    Statement stm = con.createStatement();
    String sql = "SELECT * FROM stats s " +
                 "INNER JOIN players p ON s.PID = p.PLAYER_ID " +
                 "WHERE p.FNAME = ?";
    PreparedStatement stmt = con.prepareStatement(sql);
    stmt.setString(1, a);
    ResultSet rs = stmt.executeQuery();
    rs.next();
    int goal = rs.getInt("YELLOW_CARDS");
    int pid = rs.getInt("pid");
    goal -= 1;
    sql = "update stats set YELLOW_CARDS=" + goal + " where pid=" + pid + "";
    int affect = stm.executeUpdate(sql);
    if (affect > 0) {
        displayBTNActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "ManualTrigger"));
    }
} catch (SQLException ex) {
    Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
} catch (ClassNotFoundException ex) {
    Logger.getLogger(CONTRACTS.class.getName()).log(Level.SEVERE, null, ex);
}
    }//GEN-LAST:event_goals6ActionPerformed

    private void goals7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goals7ActionPerformed
          
        if ("___".equals(statOP.getSelectedItem())) {
    JOptionPane.showMessageDialog(this, "SELECT A PLAYER ");
    return;
}
String a = (String) statOP.getSelectedItem();

try {
    Class.forName("com.mysql.jdbc.Driver");
    Connection con = Connect.getConnection();
    Statement stm = con.createStatement();
    String sql = "SELECT * FROM stats s " +
                 "INNER JOIN players p ON s.PID = p.PLAYER_ID " +
                 "WHERE p.FNAME = ?";
    PreparedStatement stmt = con.prepareStatement(sql);
    stmt.setString(1, a);
    ResultSet rs = stmt.executeQuery();
    rs.next();
    int goal = rs.getInt("RED_CARDS");
    int pid = rs.getInt("pid");
    goal -= 1;
    sql = "update stats set RED_CARDS=" + goal + " where pid=" + pid + "";
    int affect = stm.executeUpdate(sql);
    if (affect > 0) {
        displayBTNActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "ManualTrigger"));
    }
} catch (SQLException ex) {
    Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
} catch (ClassNotFoundException ex) {
    Logger.getLogger(CONTRACTS.class.getName()).log(Level.SEVERE, null, ex);
}
    }//GEN-LAST:event_goals7ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(STATS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(STATS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(STATS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(STATS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new STATS().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back;
    private javax.swing.JButton displayBTN;
    private javax.swing.JButton goals;
    private javax.swing.JButton goals1;
    private javax.swing.JButton goals2;
    private javax.swing.JButton goals3;
    private javax.swing.JButton goals4;
    private javax.swing.JButton goals5;
    private javax.swing.JButton goals6;
    private javax.swing.JButton goals7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> statOP;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables
}
