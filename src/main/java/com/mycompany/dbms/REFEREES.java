/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.dbms;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Moideen Aadil Shan
 */
public class REFEREES extends javax.swing.JFrame {
int b;

private void dropdown() throws SQLException{
         try{
        Class.forName("com.mysql.jdbc.Driver");
        Connection con = Connect.getConnection();
        Statement stm = con.createStatement();
        String sql="SELECT * FROM referee";
        ResultSet rs=stm.executeQuery(sql);
       
        while (rs.next()) {
            
                String teamName = rs.getString("ref_id");
               refOP.addItem(teamName);
               deleteOP.addItem(teamName);
               updateOP1.addItem(teamName);
            }
        String ref="IFA";
         String sql1="SELECT * FROM contracts where employer='"+ref+"'";
        ResultSet rs1=stm.executeQuery(sql1);
        while (rs1.next()) {
            
                int cid = rs1.getInt("contract_id");
                String s = Integer.toString(cid);
                insertOP.addItem(s);
                updateCOP.addItem(s);
            }
        
        }catch(SQLException ex){
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * Creates new form REFEREES
     */
    public REFEREES(int a) throws SQLException {
        b=a;
        initComponents();
         setExtendedState(REFEREES.MAXIMIZED_BOTH);
        dropdown();
        if(b==0){
            jLabel5.setVisible(false);
            jLabel6.setVisible(false);
            jLabel2.setVisible(false);
            jLabel11.setVisible(false);
            jLabel4.setVisible(false);
            jLabel7.setVisible(false);
            jLabel8.setVisible(false);
            jLabel9.setVisible(false);
            jLabel10.setVisible(false);
            jLabel3.setVisible(false);
            jLabel13.setVisible(false);
            jLabel12.setVisible(false);
            name1.setVisible(false);
            insertOP.setVisible(false);
            lname1.setVisible(false);
            age.setVisible(false);
            deleteOP.setVisible(false);
            deleteBTN.setVisible(false);
            updateBTN.setVisible(false);
            updateOP1.setVisible(false);
            ufname.setVisible(false);
            ulname.setVisible(false);
            uage.setVisible(false);
            updateCOP.setVisible(false);
            insertBTN.setVisible(false);
            jLabel14.setVisible(false);
        }
    }

    private REFEREES() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        back = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        name1 = new javax.swing.JTextField();
        lname1 = new javax.swing.JTextField();
        age = new javax.swing.JTextField();
        insertOP = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        insertBTN = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        deleteOP = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        deleteBTN = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        updateOP1 = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        ulname = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        ufname = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        uage = new javax.swing.JTextField();
        updateCOP = new javax.swing.JComboBox<>();
        jLabel14 = new javax.swing.JLabel();
        updateBTN = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        displayBTN = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        refOP = new javax.swing.JComboBox<>();
        matchbtn = new javax.swing.JButton();
        displayBTN1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        back.setFont(new java.awt.Font("Solid Edge Stencil", 1, 14)); // NOI18N
        back.setText("<");
        back.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 102, 102), 2, true));
        back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel5.setText("ADD NEW REFEREE:");

        name1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                name1ActionPerformed(evt);
            }
        });

        lname1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lname1ActionPerformed(evt);
            }
        });

        age.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ageActionPerformed(evt);
            }
        });

        insertOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertOPActionPerformed(evt);
            }
        });

        jLabel2.setText("AGE:");

        jLabel3.setText("FIRST NAME:");

        jLabel4.setText("CID:");

        jLabel6.setText("LAST NAME:");

        insertBTN.setBackground(new java.awt.Color(0, 102, 102));
        insertBTN.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        insertBTN.setForeground(new java.awt.Color(255, 255, 255));
        insertBTN.setText("INSERT");
        insertBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertBTNActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel7.setText("DELETE REFEREE:");

        deleteOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteOPActionPerformed(evt);
            }
        });

        jLabel8.setText("REFEREE ID");

        deleteBTN.setBackground(new java.awt.Color(0, 102, 102));
        deleteBTN.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        deleteBTN.setForeground(new java.awt.Color(255, 255, 255));
        deleteBTN.setText("DELETE");
        deleteBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBTNActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        jLabel9.setText("UPDATE REFEREE:");

        updateOP1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOP1ActionPerformed(evt);
            }
        });

        jLabel10.setText("REFEREE ID");

        ulname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ulnameActionPerformed(evt);
            }
        });

        jLabel11.setText("FIRST NAME:");

        jLabel12.setText("AGE:");

        ufname.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ufnameActionPerformed(evt);
            }
        });

        jLabel13.setText("LAST NAME:");

        uage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uageActionPerformed(evt);
            }
        });

        updateCOP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "____" }));
        updateCOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateCOPActionPerformed(evt);
            }
        });

        jLabel14.setText("CID:");

        updateBTN.setBackground(new java.awt.Color(0, 102, 102));
        updateBTN.setFont(new java.awt.Font("Times New Roman", 0, 12)); // NOI18N
        updateBTN.setForeground(new java.awt.Color(255, 255, 255));
        updateBTN.setText("UPDATE");
        updateBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(56, 56, 56)
                                .addComponent(deleteOP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(62, 62, 62))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel11)
                                        .addGap(18, 18, 18)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(name1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel6)
                                        .addGap(30, 30, 30)
                                        .addComponent(lname1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(insertOP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(deleteBTN)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel10)
                                    .addGap(18, 18, 18)
                                    .addComponent(updateOP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(jLabel9)))
                        .addGap(48, 48, 48)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel14)
                            .addComponent(jLabel12))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap(117, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(279, 279, 279)
                .addComponent(insertBTN)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel13))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(updateCOP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ufname, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(uage, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ulname, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(updateBTN)))
                .addGap(99, 99, 99))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(back, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(name1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lname1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(age, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(insertOP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(insertBTN)
                .addGap(28, 28, 28)
                .addComponent(jLabel7)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteOP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deleteBTN))
                .addGap(68, 68, 68)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(ufname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ulname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(updateOP1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(uage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(updateBTN)))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateCOP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(496, Short.MAX_VALUE))
        );

        jPanel3.setBackground(new java.awt.Color(0, 102, 102));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "REFEREE ID", "FIRST NAME", "LAST NAME", "AGE", "CID"
            }
        ));
        jScrollPane1.setViewportView(table);

        displayBTN.setBackground(new java.awt.Color(0, 0, 0));
        displayBTN.setFont(new java.awt.Font("Solid Edge Stencil", 0, 12)); // NOI18N
        displayBTN.setForeground(new java.awt.Color(255, 255, 255));
        displayBTN.setText("DISPLAY ALL");
        displayBTN.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        displayBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayBTNActionPerformed(evt);
            }
        });

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("REFEREE ID:");

        refOP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refOPActionPerformed(evt);
            }
        });

        matchbtn.setBackground(new java.awt.Color(0, 0, 0));
        matchbtn.setFont(new java.awt.Font("Solid Edge Stencil", 0, 12)); // NOI18N
        matchbtn.setForeground(new java.awt.Color(255, 255, 255));
        matchbtn.setText("SHOW MATCHES OFFICIATED");
        matchbtn.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        matchbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                matchbtnActionPerformed(evt);
            }
        });

        displayBTN1.setBackground(new java.awt.Color(0, 0, 0));
        displayBTN1.setFont(new java.awt.Font("Solid Edge Stencil", 0, 12)); // NOI18N
        displayBTN1.setForeground(new java.awt.Color(255, 255, 255));
        displayBTN1.setText("SHOW CONTRACT DETAILS");
        displayBTN1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        displayBTN1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayBTN1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(256, 256, 256)
                        .addComponent(displayBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(162, 162, 162)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(refOP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(matchbtn)
                            .addComponent(displayBTN1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(displayBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(refOP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(matchbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(9, 9, 9)
                .addComponent(displayBTN1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 685, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void displayBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayBTNActionPerformed
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = Connect.getConnection();

            Statement stm = con.createStatement();

            String sql = "SELECT * FROM referee";
            ResultSet rs = stm.executeQuery(sql);

            // Clear existing data from jTable1
            DefaultTableModel model = (DefaultTableModel) table.getModel();
            model.setRowCount(0);

            // Populate jTable1 with data from ResultSet
            while (rs.next()) {
                int rid=rs.getInt("REF_ID");
                String Fn=rs.getString("FNAME");
                String Ln=rs.getString("LNAME");
                int age=rs.getInt("AGE");
                int cid=rs.getInt("CID");
                // Add a new row to jTable1
                model.addRow(new Object[]{rid,Fn,Ln,age,cid});
            }

            // Close resources
            rs.close();
            stm.close();
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CONTRACTS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_displayBTNActionPerformed

    private void backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backActionPerformed
        dispose();
        HomePage hp=new HomePage(b);
        hp.show();
    }//GEN-LAST:event_backActionPerformed

    private void refOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refOPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_refOPActionPerformed

    private void matchbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_matchbtnActionPerformed
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = Connect.getConnection();

            Statement stm = con.createStatement();
           Boolean flag=true;

    // Create a JTextArea to display the details
            JTextArea textArea = new JTextArea();
            textArea.setEditable(false);
            String sql = "SELECT * FROM matches WHERE RID="+refOP.getSelectedItem()+"";
            ResultSet rs = stm.executeQuery(sql);

            while (rs.next()) {
            textArea.append("Match ID: " + rs.getInt("MATCH_ID") + "\n"
                    + "Team 1: " + rs.getString("T1") + "\n"
                    + "Team 2: " + rs.getString("T2") + "\n"
                    + "Winner: " + rs.getString("WINNER") + "\n"
                    + "Date: " + rs.getString("MDATE") + "\n"
                    + "Time: " + rs.getString("MTIME") + "\n\n");
            flag=false;
        }
            
            if(flag){
                textArea.append("THE REFEREE DID NOT OFFICIATE ANY MATCH");
            }
            

        // Create a JScrollPane to allow scrolling if there are many matches
        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setPreferredSize(new Dimension(400, 300));
         textArea.setCaretPosition(0);
        // Display the popup using JOptionPane with a JScrollPane
        JOptionPane.showMessageDialog(null, scrollPane, "MATCHES OFFICIATED BY REFEREE_ID :"+refOP.getSelectedItem(), JOptionPane.INFORMATION_MESSAGE);

            

            // Close resources
            rs.close();
            stm.close();
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CONTRACTS.class.getName()).log(Level.SEVERE, null, ex);
        }       
                       
    }//GEN-LAST:event_matchbtnActionPerformed

    private void displayBTN1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayBTN1ActionPerformed
        try {
            Class.forName("com.mysql.jdbc.Driver");
            Connection con = Connect.getConnection();

            Statement stm = con.createStatement();
           

    // Create a JTextArea to display the details
            JTextArea textArea = new JTextArea();
            textArea.setEditable(false);
            String sql = "SELECT CID FROM referee WHERE REF_ID="+refOP.getSelectedItem()+"";
            ResultSet rs = stm.executeQuery(sql);
            rs.next();
            int ci=rs.getInt("CID");
            sql="SELECT * FROM CONTRACTS WHERE CONTRACT_ID="+ci+"";
            rs=stm.executeQuery(sql);
            while (rs.next()) {
            textArea.append("CONTRACT ID: " + rs.getInt("CONTRACT_ID") + "\n"
                    + "START DATE: " + rs.getString("START_DATE") + "\n"
                    + "END DATE: " + rs.getString("END_DATE") + "\n"
                    + "EMPLOYER: " + rs.getString("EMPLOYER") + "\n"
                    + "SALARY: " + rs.getString("SALARY") + "\n\n");
        }

        // Create a JScrollPane to allow scrolling if there are many matches
        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setPreferredSize(new Dimension(400, 300));
         textArea.setCaretPosition(0);
        // Display the popup using JOptionPane with a JScrollPane
        JOptionPane.showMessageDialog(null, scrollPane, "CONTRACT DETAILS OF REFEREE_ID :"+refOP.getSelectedItem(), JOptionPane.INFORMATION_MESSAGE);

            

            // Close resources
            rs.close();
            stm.close();
            con.close();
        } catch (SQLException ex) {
            Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(CONTRACTS.class.getName()).log(Level.SEVERE, null, ex);
        }       
                             
    }//GEN-LAST:event_displayBTN1ActionPerformed

    private void name1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_name1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_name1ActionPerformed

    private void lname1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lname1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lname1ActionPerformed

    private void ageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ageActionPerformed

    private void insertOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertOPActionPerformed
            // TODO add your handling code here:
    }//GEN-LAST:event_insertOPActionPerformed

    private void insertBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertBTNActionPerformed
        if(b==1||b==3){
            boolean filled=true;
            if(age.getText().equals("")|| name1.getText().equals("") ||  lname1.getText().equals("")){
                    filled=false;
                }
            if(filled ){

                try {

                    Class.forName("com.mysql.jdbc.Driver");
                    Connection con = Connect.getConnection();
                    boolean flag=true;
                    int sal1=0;
                    Statement stm = con.createStatement();
                    String age1=age.getText();
                    String name=(String) name1.getText();
                    String lname=(String) lname1.getText();
                    String selected=(String)insertOP.getSelectedItem();
                    int sel;
                    try{
                        sel=Integer.parseInt(selected);
                        sal1=Integer.parseInt(age1);
                        if(sal1==0){
                            JOptionPane.showMessageDialog(this, "age cannot be zero.", "Input Error", JOptionPane.ERROR_MESSAGE);
                            return;
                        }

                    }catch(NumberFormatException ex){
                        JOptionPane.showMessageDialog(this, "Please enter a valid age.", "Input Error", JOptionPane.ERROR_MESSAGE);
                        ex.printStackTrace();
                        return;

                    }
                    
                    String sql="INSERT INTO REFEREE (FNAME,LNAME,AGE,CID) VALUES ('"+name+"','"+lname+"',"+sal1+","+sel+")";
                    stm.executeUpdate(sql);
                    ResultSet rs=stm.executeQuery("select * FROM CONTRACTS ORDER BY CONTRACT_ID DESC LIMIT 1");
                if(rs.next()){
                    String temp=rs.getString("CONTRACT_ID");
                    deleteOP.addItem(temp);
                    refOP.addItem(temp);
                }
                    JOptionPane.showMessageDialog(this, "Referee added succesfully");
                    displayBTNActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "ManualTrigger"));

                }   catch (ClassNotFoundException ex) {
                    Logger.getLogger(CONTRACTS.class.getName()).log(Level.SEVERE, null, ex);
                } catch (SQLException ex) {
                    Logger.getLogger(CONTRACTS.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else{
                JOptionPane.showMessageDialog(this, "Fill all the fields ");
            }
        }else{
            JOptionPane.showMessageDialog(this, "YOU DONT HAVE ACCESS TO INSERT ");
        }
    }//GEN-LAST:event_insertBTNActionPerformed

    private void deleteOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteOPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_deleteOPActionPerformed

    private void deleteBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBTNActionPerformed
        try{
            String selected=(String)deleteOP.getSelectedItem();

            if(b==1||b==3){
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = Connect.getConnection();
                Statement stm = con.createStatement();

                String sql = "DELETE FROM REFEREE where REF_ID='"+selected+"'";
                int rowsAffected =stm.executeUpdate(sql);
                if(rowsAffected>0){
                    JOptionPane.showMessageDialog(this,"REFEREE WITH ID " + selected +" IS DELETED ");
                    deleteOP.removeItem(selected);
                    updateOP1.removeItem(selected);
                    displayBTNActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "ManualTrigger"));

                    //updateop.removeItem(selected);
                }
            }else{
                JOptionPane.showMessageDialog(this, "YOU DONT HAVE ACCESS TO DELETE ");

            }
        }catch(SQLException ex){
            ex.printStackTrace();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_deleteBTNActionPerformed

    private void updateOP1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateOP1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateOP1ActionPerformed

    private void ulnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ulnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ulnameActionPerformed

    private void ufnameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ufnameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ufnameActionPerformed

    private void uageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uageActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uageActionPerformed

    private void updateCOPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateCOPActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_updateCOPActionPerformed

    private void updateBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBTNActionPerformed
        if(b==1||b==3){
            try{
                String selected = (String) updateOP1.getSelectedItem();
int sel=0;
boolean a=true;

try {
    sel = Integer.parseInt(selected);
} catch (NumberFormatException e) {
    e.printStackTrace();
}
                boolean flag=false;

                String fname=ufname.getText();
                String lname=ulname.getText();
                String Uage=uage.getText();
                String cid=(String)updateCOP.getSelectedItem();
                int age1=-1,cid1=0;
                
                if(!Uage.isEmpty()){
                    try{
                        
                        age1=Integer.parseInt(Uage);
                        
                    }catch(NumberFormatException e){
                        JOptionPane.showMessageDialog(this, "Please enter a valid age.", "Input Error", JOptionPane.ERROR_MESSAGE);
                        e.printStackTrace();
                        return;

                    }
                }
                if(!(cid.equals("____"))){
                    try{
                        cid1=Integer.parseInt(cid);
                    }catch(NumberFormatException e){
                        
                        e.printStackTrace();
                        return;

                    }
                }
                
                Class.forName("com.mysql.jdbc.Driver");
                Connection con = Connect.getConnection();
                Statement stm = con.createStatement();
                
                if(age1==0){
                    
                    JOptionPane.showMessageDialog(this,"Age cannot be zero,not updated");
                    a=false;
                    return;
                }
                else if(age1>0){
                    
                   String sql="UPDATE referee SET age="+age1+" WHERE ref_id="+sel+"";
                    stm.executeUpdate(sql);
                    flag=true;
                    
                }
                if(!(fname.equals(""))){
                        
                        String sql="UPDATE referee SET fname='"+fname+"' WHERE ref_id="+sel+"";
                        stm.executeUpdate(sql);
                        flag=true;
                    
                }
                if(!(lname.equals(""))){
                    
               String sql="UPDATE referee SET lname='"+lname+"' WHERE ref_id="+sel+"";
                    stm.executeUpdate(sql);
                    flag=true;
                    
                }
                
                
                
                if(cid1>0){
                    flag=true;
                   String sql="UPDATE referee SET cid="+cid1+" WHERE ref_id="+sel+"";
                    stm.executeUpdate(sql);
                    
                }
                
                if(flag){
                    JOptionPane.showMessageDialog(this,"UPDATED SUCCESSFULLY");
                    // Assuming jButton1 is the JButton
                    displayBTNActionPerformed(new ActionEvent(this, ActionEvent.ACTION_PERFORMED, "ManualTrigger"));

                }else if(a){
                    JOptionPane.showMessageDialog(this,"ENTER FIELDS YOU WANT TO UPDATE");
                }

            } catch (ClassNotFoundException ex) {
                Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
            } catch (SQLException ex) {
                Logger.getLogger(TEAMS.class.getName()).log(Level.SEVERE, null, ex);
            }
        }else{
            JOptionPane.showMessageDialog(this,"YOU DONT HAVE ACCESS TO INSERT");
        }
    }//GEN-LAST:event_updateBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(REFEREES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(REFEREES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(REFEREES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(REFEREES.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new REFEREES().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField age;
    private javax.swing.JButton back;
    private javax.swing.JButton deleteBTN;
    private javax.swing.JComboBox<String> deleteOP;
    private javax.swing.JButton displayBTN;
    private javax.swing.JButton displayBTN1;
    private javax.swing.JButton insertBTN;
    private javax.swing.JComboBox<String> insertOP;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField lname1;
    private javax.swing.JButton matchbtn;
    private javax.swing.JTextField name1;
    private javax.swing.JComboBox<String> refOP;
    private javax.swing.JTable table;
    private javax.swing.JTextField uage;
    private javax.swing.JTextField ufname;
    private javax.swing.JTextField ulname;
    private javax.swing.JButton updateBTN;
    private javax.swing.JComboBox<String> updateCOP;
    private javax.swing.JComboBox<String> updateOP1;
    // End of variables declaration//GEN-END:variables
}
